// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// prevent naming conflicts between different projects.
/// package protobuf.proto;

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 消息三要素：1. 谁发送的消息？ 2. 发送给谁的消息？ 3. 发送的消息内容是什么？
struct Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 唯一mid
  var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  /// 消息类型
  var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// 消息内容，可能是文本，图片，语音，视频，文件等，json
  var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  /// 消息发送状态
  var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 时间戳
  var createdAt: String {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  /// 消息来源客户端
  var client: String {
    get {return _storage._client}
    set {_uniqueStorage()._client = newValue}
  }

  /// 会话
  var thread: Thread {
    get {return _storage._thread ?? Thread()}
    set {_uniqueStorage()._thread = newValue}
  }
  /// Returns true if `thread` has been explicitly set.
  var hasThread: Bool {return _storage._thread != nil}
  /// Clears the value of `thread`. Subsequent reads from it will return its default value.
  mutating func clearThread() {_uniqueStorage()._thread = nil}

  /// 发送者
  var user: User {
    get {return _storage._user ?? User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  /// 自定义扩展/附加信息
  var extra: String {
    get {return _storage._extra}
    set {_uniqueStorage()._extra = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Message: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Message"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "type"),
    3: .same(proto: "content"),
    4: .same(proto: "status"),
    5: .same(proto: "createdAt"),
    6: .same(proto: "client"),
    7: .same(proto: "thread"),
    8: .same(proto: "user"),
    9: .same(proto: "extra"),
  ]

  fileprivate class _StorageClass {
    var _uid: String = String()
    var _type: String = String()
    var _content: String = String()
    var _status: String = String()
    var _createdAt: String = String()
    var _client: String = String()
    var _thread: Thread? = nil
    var _user: User? = nil
    var _extra: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uid = source._uid
      _type = source._type
      _content = source._content
      _status = source._status
      _createdAt = source._createdAt
      _client = source._client
      _thread = source._thread
      _user = source._user
      _extra = source._extra
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._uid) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._type) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._content) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._status) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._createdAt) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._client) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._thread) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._user) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._extra) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 1)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 2)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 3)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 4)
      }
      if !_storage._createdAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdAt, fieldNumber: 5)
      }
      if !_storage._client.isEmpty {
        try visitor.visitSingularStringField(value: _storage._client, fieldNumber: 6)
      }
      try { if let v = _storage._thread {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if !_storage._extra.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extra, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Message, rhs: Message) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._client != rhs_storage._client {return false}
        if _storage._thread != rhs_storage._thread {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._extra != rhs_storage._extra {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
